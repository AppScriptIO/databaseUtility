"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.aggregation = aggregation;exports.documentRelatedToAggregation = documentRelatedToAggregation;exports.multipleRelationship = multipleRelationship;exports.getSingleDocumentOfSpecificLanguage = getSingleDocumentOfSpecificLanguage;exports.getMergedMultipleDocumentOfSpecificLanguage = getMergedMultipleDocumentOfSpecificLanguage;exports.getMultipleDocumentVersionOfSpecificLanguage = getMultipleDocumentVersionOfSpecificLanguage;var _rethinkdb = _interopRequireDefault(require("rethinkdb"));





function aggregation({
  table,
  aggregatedDocumentKey })
{
  let aggregatedDocument = table.filter({ key: aggregatedDocumentKey });

  let version =
  aggregatedDocument.
  concatMap(function (document) {
    return document('version');
  }).
  concatMap(function (document) {
    let related = table.getAll(document, { index: 'key' });
    return related;
  });

  return version;
}




async function documentRelatedToAggregation({
  databaseConnection,
  dataAggregatedKey,
  dataTableName })
{
  let dataTable = _rethinkdb.default.db('webappContent').table(dataTableName);
  let version =
  aggregation({ table: dataTable, aggregatedDocumentKey: dataAggregatedKey }).
  coerceTo('array').
  run(databaseConnection);
  return version;
}





function multipleRelationship({
  relationshipTable,
  tableArray = [] })
{
  let relationshipSequence = relationshipTable.map(function (document) {return { relationship: document };});
  for (let table of tableArray) {
    relationshipSequence =
    relationshipSequence.
    concatMap(document => {
      let comparingKey;
      comparingKey = _rethinkdb.default.branch(
      document.hasFields({ 'relationship': { [table['name']]: true } }), document('relationship')(table['name'])('documentKey'),
      []);

      let related = table['table'].getAll(
      comparingKey,
      { index: 'key' });

      return related.map(relatedDocument => {
        return document.merge({ [table['name']]: relatedDocument });
      });
    });
  }
  return relationshipSequence;
}





async function getSingleDocumentOfSpecificLanguage({
  languageDocumentKey,
  dataTableName,
  dataAggregatedKey,
  databaseConnection })
{
  const contentDatabase = _rethinkdb.default.db('webappContent');
  let languageTable = contentDatabase.table('language');
  let relationshipTable = contentDatabase.table('relationship');
  let dataTable = contentDatabase.table(dataTableName);
  let version = aggregation({ table: dataTable, aggregatedDocumentKey: dataAggregatedKey });

  return await multipleRelationship({
    relationshipTable,
    tableArray: [{ name: dataTableName, table: dataTable }, { name: 'language', table: languageTable }] }).

  filter(document => {return document('language')('key').eq(languageDocumentKey);}).
  filter(document => {
    return version.contains(version => {
      return document(dataTableName)('key').eq(version('key'));
    });
  }).
  getField(dataTableName).

  nth(0).
  run(databaseConnection);
}




async function getMergedMultipleDocumentOfSpecificLanguage({
  languageDocumentKey,
  dataTableName,
  databaseConnection })
{
  const contentDatabase = _rethinkdb.default.db('webappContent');
  var dataTable = contentDatabase.table(dataTableName);
  let languageTable = contentDatabase.table('language');
  let relationshipTable = contentDatabase.table('relationship');

  let tableArray = [{ name: dataTableName, table: dataTable }, { name: 'language', table: languageTable }];
  let result = await (
    multipleRelationship({ relationshipTable, tableArray }).
    filter(function (document) {return document('language')('key').eq(languageDocumentKey);}).
    getField(dataTableName).
    reduce((previous, current) => {return previous.merge(current);}).

    run(databaseConnection));
  return result;
}





async function getMultipleDocumentVersionOfSpecificLanguage({
  databaseConnection,
  languageDocumentKey,
  dataTableName })
{
  const contentDatabase = _rethinkdb.default.db('webappContent');
  var article = contentDatabase.table(dataTableName);
  let language = contentDatabase.table('language');
  let relationshipTable = contentDatabase.table('relationship');

  let tableArray = [{ name: dataTableName, table: article }, { name: 'language', table: language }];
  let result = await (
    multipleRelationship({ relationshipTable, tableArray }).
    filter(function (document) {return document('language')('key').eq(languageDocumentKey);}).
    getField(dataTableName).
    coerceTo('array').
    run(databaseConnection));
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,